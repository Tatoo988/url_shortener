import json
import re
import uuid
from datetime import datetime

from flask import jsonify, redirect, request

from app import db
from app.api import bp
from app.api.errors import bad_request, conflict, not_found
from app.models import ShortenURL


def exists_shortcode(shortcode):
    return db.session.query(db.exists().where(ShortenURL.shortcode == shortcode)).scalar()


def get_shortcode_for_url(url):
    return db.session.query(ShortenURL.shortcode).filter_by(url=url).scalar()


def validate_shortcode(shortcode):
    """
    This function is used to validate the the shortcode proposed by a user.
    The random unique shortcode generated by generate_unique_shortcode does not use this function
    :param shortcode: a shortcode
    :return: True if the shortcode accomplishes the regular expression. False otherwise
    """
    regex = r"^[0-9a-zA-Z_]{4,}$"
    result = re.match(regex, 'shortcode')
    return result is not None


def generate_unique_shortcode():
    """
    generic function to create a unique 6 digits value that is not used in as shorten value.
    This uses
    :return:
    """
    while True:
        candidate_vaule = uuid.uuid4().hex[:6]
        if not exists_shortcode(candidate_vaule):
            return candidate_vaule


@bp.route('/<string:shortcode>', methods=['GET'])
def get_shortcode(shortcode):
    shorten_url = ShortenURL.query.filter_by(shortcode=shortcode).first()
    if shorten_url:
        shorten_url.redirect_count += 1
        shorten_url.last_seen_date = datetime.utcnow()
        db.session.commit()
        redirection_url = shorten_url.url
        # in case we added url without http:// or https://. required for correct redirection
        if redirection_url.find("http://") != 0 and redirection_url.find("https://") != 0:
            redirection_url = "http://" + redirection_url
        return redirect(redirection_url, code=302)
    return not_found("The shortcode cannot be found in the system")


@bp.route('/<string:shortcode>/stats', methods=['GET'])
def get_shortcode_stats(shortcode):
    shorten_url = ShortenURL.query.filter_by(shortcode=shortcode).first()
    if shorten_url:
        return jsonify(shorten_url.to_dict())
    return not_found("The shortcode cannot be found in the system")


@bp.route('/shorten', methods=['POST'])
def create_shorten():
    data = json.loads(request.data) or {}
    if 'url' not in data:
        return bad_request('url is not present')
    if 'shortcode' not in data:
        shortcode = generate_unique_shortcode()
    else:
        shortcode = data['shortcode']
        if exists_shortcode(shortcode):
            return conflict('The the desired shortcode is already in use. Shortcodes are case-sensitive.')
    url = data['url']
    url_shortcode = get_shortcode_for_url(url)
    if url_shortcode:
        return conflict('The the desired url is already registered with Shortcode {}.'.format(url_shortcode))
    shorten = ShortenURL(url=data['url'], shortcode=shortcode)
    db.session.add(shorten)
    db.session.commit()
    return jsonify({'shortcode': shorten.shortcode}), 201




